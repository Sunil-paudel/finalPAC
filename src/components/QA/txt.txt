import React, { useState, useEffect, useRef } from 'react';
import Cookies from 'js-cookie';
import { useRouter } from 'next/navigation';

function QuestionAnswer() {
  const [messages, setMessages] = useState([]);
  const [chatHistory, setChatHistory] = useState([]);
  const [question, setQuestion] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const [showOptions, setShowOptions] = useState(false);
  const [showChatHistory, setShowChatHistory] = useState(false);
  const [selectedMessageIndex, setSelectedMessageIndex] = useState(null);
  const [editedMessage, setEditedMessage] = useState('');
  const [systemContent, setSystemContent] = useState(''); // Added state for system content
  const chatContainerRef = useRef(null);
  const router = useRouter();

  // Replace 'YOUR_OPENAI_API_KEY' with your actual OpenAI API key
  const OPENAI_API_KEY = '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';

  const prompts = [
    {
      text: 'Schedule Appointment',
      action: () => {
        router.push('/appointment');
        setQuestion('');
      },
    },
    {
      text: 'Get Weather Updates',
      action: () => {
        router.push('/weather');
        setQuestion('');
      },
    },
    {
      text: 'Ask a general question',
      action: () => {
        setShowOptions(false);
      },
    },
  ];

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  function scrollToBottom() {
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;
    }
  }

  useEffect(() => {
    const savedChatHistory = Cookies.get('chatHistory');
    if (savedChatHistory) {
      setChatHistory(JSON.parse(savedChatHistory));
    }
  }, []);

  useEffect(() => {
    Cookies.set('chatHistory', JSON.stringify(chatHistory), { expires: 30 });
  }, [chatHistory]);

  useEffect(() => {
    // Load system content from the text file
    fetch('/initial_system_context.txt')
      .then((response) => response.text())
      .then((data) => {
        setSystemContent(data);
      })
      .catch((error) => {
        console.error('Error loading system content:', error);
      });
  }, []);

  async function callOpenAIAPI(messageContent) {
    try {
      setLoading(true);

      const APIBody = {
        messages: [
          {
            role: 'system',
            content: systemContent, // Use the loaded system content
          },
          {
            role: 'user',
            content: messageContent,
          },
        ],
        model: 'gpt-3.5-turbo',
      };

      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${OPENAI_API_KEY}`,
        },
        body: JSON.stringify(APIBody),
      });

      setLoading(false);

      if (!response.ok) {
        throw new Error('API request failed.');
      }

      const data = await response.json();
      const botMessage = data.choices[0].message.content.trim();

      const newMessage = { text: messageContent, role: 'user' };
      const systemResponse = { text: botMessage, role: 'bot' };

      setMessages([...messages, newMessage, systemResponse]);
      setChatHistory([...chatHistory, newMessage, systemResponse]);

      if (messageContent.toLowerCase() === 'hi' && !showOptions) {
        setShowOptions(true);
      }
    } catch (error) {
      setLoading(false);
      setError('Something went wrong while fetching data. Please try again.');
      console.error('Error:', error); // Log detailed error information for debugging.
    }
  }

  const handleInputKeyPress = async (e) => {
    if (e.key === 'Enter') {
      if (!question.trim()) {
        setError('Please enter a question.');
        return;
      }

      // Add your code for sending a POST request to '/api/chatbot' here if needed.
      // This is the part where you can communicate with your server or another API.
      try {
        const response = await fetch('/api/chatbot', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ question }),
        });

        if (response.status === 201) {
          // Request was successful
          console.log('Data sent successfully');
          // You can perform additional actions here after a successful POST.
        } else {
          // Handle errors if needed
          console.error('Error sending data');
        }
      } catch (error) {
        // Handle network or other errors
        console.error('Error:', error);
      }

      // Continue with calling the OpenAI API and resetting the question input.
      callOpenAIAPI(question);
      setQuestion('');
    }
  };

  const handlePromptClick = (prompt) => {
    prompt.action();
  };

  const handleNewChat = () => {
    setMessages([]);
    setShowOptions(false);
    scrollToBottom();
  };

  const toggleChatHistory = () => {
    setShowChatHistory(!showChatHistory);
  };

  const goToHomePage = () => {
    router.push('/'); // Replace '/' with the actual path to your home page
  };

  const selectMessageForEdit = (index) => {
    setSelectedMessageIndex(index);
    setEditedMessage(messages[index].text);
  };

  const saveEditedMessage = () => {
    if (selectedMessageIndex !== null) {
      const editedUserMessage = { text: editedMessage, role: 'user' };

      callOpenAIAPI(editedMessage);

      const updatedMessages = [
        ...messages.slice(0, selectedMessageIndex),
        editedUserMessage,
        ...messages.slice(selectedMessageIndex + 1),
      ];
      setMessages(updatedMessages);
      setChatHistory([...chatHistory, editedUserMessage]);

      setSelectedMessageIndex(null);
      setEditedMessage('');
    }
  };

  return (
    <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', height: '100vh', backgroundColor: '#f5f5f5', margin: '0', padding: '0' }}>
      <h1 style={{ fontSize: '24px', marginBottom: '20px', color: 'rgb(70, 81, 81)' }}>Chat with PAC</h1>
      <div style={{ width: '80%', maxHeight: '400px', overflowY: 'auto', backgroundColor: '#fff', border: '1px solid #ccc', padding: '10px', borderRadius: '5px' }} ref={chatContainerRef}>
        {messages.map((message, index) => (
          <div
            key={index}
            style={{ padding: '5px', margin: '5px 0', borderRadius: '5px', color: '#292626', backgroundColor: message.role === 'user' ? '#e0e0e0' : '#b0d2ff' }}
          >
            {message.role === 'user' && selectedMessageIndex === index ? (
              <div>
                <input
                  type="text"
                  value={editedMessage}
                  onChange={(e) => setEditedMessage(e.target.value)}
                  placeholder="Edit your message"
                />
                <button onClick={saveEditedMessage}>Save</button>
              </div>
            ) : (
              <div>
                {message.text}
                {message.role === 'user' && (
                  <button onClick={() => selectMessageForEdit(index)}>Edit Message</button>
                )}
              </div>
            )}
          </div>
        ))}
      </div>
      <div style={{ width: '80%', marginTop: '20px', display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
        {showOptions ? (
          <div>
            <div style={{ fontWeight: 'bold', marginBottom: '10px', color: '#292626' }}>Choose your option below or ask me general questions:</div>
            <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>
              {prompts.map((prompt, index) => (
                <button
                  key={index}
                  onClick={() => handlePromptClick(prompt)}
                  style={{ padding: '10px', margin: '5px', backgroundColor: '#b0d2ff', color: '#292626', border: 'none', borderRadius: '5px', cursor: 'pointer' }}
                >
                  {prompt.text}
                </button>
              ))}
            </div>
          </div>
        ) : null}
        <textarea
          value={question}
          onChange={(e) => {
            setQuestion(e.target.value);
            setError('');
          }}
          onKeyPress={handleInputKeyPress}
          placeholder='Say hi to start or ask a general question...'
          style={{ width: '100%', padding: '10px', border: '1px solid #ccc', borderRadius: '5px', marginBottom: '10px', resize: 'none' }}
          cols={100}
          rows={10}
        />
        <div style={{ display: 'flex', justifyContent: 'space-between', width: '100%', marginTop: '10px' }}>
          <button onClick={handleNewChat} style={{ backgroundColor: '#dc3545', color: '#fff', padding: '10px', border: 'none', borderRadius: '5px', cursor: 'pointer' }}>
            New Chat
          </button>
          <button style={{ backgroundColor: '#007bff', color: '#fff', padding: '10px', border: 'none', borderRadius: '5px', cursor: 'pointer' }} onClick={toggleChatHistory}>
            {showChatHistory ? 'Hide recent' : 'Show recents quesetion'}
          </button>
          <button onClick={goToHomePage} style={{ backgroundColor: '#dc3545', color: '#fff', padding: '10px', border: 'none', borderRadius: '5px', cursor: 'pointer' }}>
            Exit
          </button>
        </div>
        {showChatHistory && (
          <div style={{ marginTop: '20px', width: '80%', backgroundColor: '#f5f5f5', border: '1px solid #ccc', padding: '10px', borderRadius: '5px' }}>
            <h2>Recent chat on web</h2>
            {chatHistory.map((message, index) => (
              <div
                key={index}
                style={{ padding: '5px', margin: '5px 0', borderRadius: '5px', backgroundColor: message.role === 'user' ? '#e0e0e0' : '#b0d2ff' }}
              >
                {message.text}
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
}

export default QuestionAnswer;
